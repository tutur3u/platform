name: Vercel Shortener Preview Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_SHORTENER_PROJECT_ID }}
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
on:
  push:
    branches-ignore:
      - production
    paths:
      - "apps/shortener/**"
      - "packages/**"
      - ".github/workflows/vercel-preview-shortener.yaml"
  workflow_dispatch:

jobs:
  Deploy-Preview:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Check for newer commits
        id: check_commits
        run: |
          CURRENT_BRANCH=${GITHUB_REF#refs/heads/}
          git fetch origin $CURRENT_BRANCH || { echo "Remote branch not found, continuing with build"; echo "skip_build=false" >> $GITHUB_OUTPUT; exit 0; }
          LATEST_COMMIT=$(git rev-parse origin/$CURRENT_BRANCH 2>/dev/null || echo "")
          CURRENT_COMMIT=${GITHUB_SHA}
          if [ -n "$LATEST_COMMIT" ] && [ "$LATEST_COMMIT" != "$CURRENT_COMMIT" ]; then
            echo "Newer commit found on $CURRENT_BRANCH branch. Skipping build."
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "This is the latest commit or new branch. Proceeding with build."
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Check deployment hash
        id: hash_check
        if: steps.check_commits.outputs.skip_build != 'true'
        run: |
          chmod +x .github/scripts/deployment-hash.sh
          .github/scripts/deployment-hash.sh \
            --app shortener \
            --branch "${GITHUB_REF#refs/heads/}" \
            --mode check

      - name: Setup bun
        if: steps.check_commits.outputs.skip_build != 'true' && steps.hash_check.outputs.needs_deployment != 'false'
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.3.1"

      - name: Use Node.js 24
        if: steps.check_commits.outputs.skip_build != 'true' && steps.hash_check.outputs.needs_deployment != 'false'
        uses: actions/setup-node@v6
        with:
          node-version: 24

      - name: Cache dependencies
        if: steps.check_commits.outputs.skip_build != 'true' && steps.hash_check.outputs.needs_deployment != 'false'
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        if: steps.check_commits.outputs.skip_build != 'true' && steps.hash_check.outputs.needs_deployment != 'false'
        run: bun install

      - name: Install Vercel CLI
        if: steps.check_commits.outputs.skip_build != 'true' && steps.hash_check.outputs.needs_deployment != 'false'
        run: bun install --global vercel@latest

      - name: Pull Vercel Environment Information
        if: steps.check_commits.outputs.skip_build != 'true' && steps.hash_check.outputs.needs_deployment != 'false'
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build workspace dependencies
        if: steps.check_commits.outputs.skip_build != 'true' && steps.hash_check.outputs.needs_deployment != 'false'
        run: bunx turbo run build --filter=@tuturuuu/types

      - name: Build Project Artifacts
        if: steps.check_commits.outputs.skip_build != 'true' && steps.hash_check.outputs.needs_deployment != 'false'
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        if: steps.check_commits.outputs.skip_build != 'true' && steps.hash_check.outputs.needs_deployment != 'false'
        run: |
          DEPLOYMENT_URL=$(vercel deploy --archive=tgz --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=${DEPLOYMENT_URL}" >> $GITHUB_OUTPUT
          echo "${DEPLOYMENT_URL}"

      - name: Update deployment hash (success)
        if: success() && steps.hash_check.outputs.needs_deployment != 'false'
        run: |
          chmod +x .github/scripts/deployment-hash.sh
          .github/scripts/deployment-hash.sh \
            --app shortener \
            --branch "${GITHUB_REF#refs/heads/}" \
            --mode update \
            --status success \
            --url "${{ steps.deploy.outputs.url }}"

      - name: Update deployment hash (failure)
        if: failure() && steps.hash_check.outputs.needs_deployment != 'false'
        run: |
          chmod +x .github/scripts/deployment-hash.sh
          .github/scripts/deployment-hash.sh \
            --app shortener \
            --branch "${GITHUB_REF#refs/heads/}" \
            --mode update \
            --status failure

      - name: Commit hash updates
        if: always() && steps.hash_check.outputs.needs_deployment != 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .deployment-hashes/
          git diff --quiet && git diff --staged --quiet || \
            git commit -m "chore: update deployment hash for shortener on ${GITHUB_REF#refs/heads/}"
          git push || true
