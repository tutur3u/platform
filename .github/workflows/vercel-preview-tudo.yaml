name: Vercel Tudo Preview Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_TUDO_PROJECT_ID }}
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
on:
  push:
    branches-ignore:
      - production
    paths:
      - "apps/tudo/**"
      - "packages/**"
      - ".github/workflows/vercel-preview-tudo.yaml"
  pull_request:
    branches-ignore:
      - production
    paths:
      - "apps/tudo/**"
      - "packages/**"
      - ".github/workflows/vercel-preview-tudo.yaml"
  workflow_dispatch:

jobs:
  Deploy-Preview:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Check for newer commits
        id: check_commits
        run: |
          CURRENT_BRANCH=${GITHUB_REF#refs/heads/}
          git fetch origin $CURRENT_BRANCH || { echo "Remote branch not found, continuing with build"; echo "skip_build=false" >> $GITHUB_OUTPUT; exit 0; }
          LATEST_COMMIT=$(git rev-parse origin/$CURRENT_BRANCH 2>/dev/null || echo "")
          CURRENT_COMMIT=${GITHUB_SHA}
          if [ -n "$LATEST_COMMIT" ] && [ "$LATEST_COMMIT" != "$CURRENT_COMMIT" ]; then
            echo "Newer commit found on $CURRENT_BRANCH branch. Skipping build."
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "This is the latest commit or new branch. Proceeding with build."
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Check deployment hash
        id: hash_check
        if: steps.check_commits.outputs.skip_build != 'true'
        run: |
          chmod +x .github/scripts/deployment-hash.sh
          .github/scripts/deployment-hash.sh \
            --app tudo \
            --branch "${GITHUB_REF#refs/heads/}" \
            --mode check 2>&1 | tee /tmp/hash-check.log || true

          # Capture hash check details for PR comment
          if [ -f /tmp/hash-check.log ]; then
            echo "hash_log<<EOF" >> $GITHUB_OUTPUT
            cat /tmp/hash-check.log >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Setup bun
        if: steps.check_commits.outputs.skip_build != 'true' && steps.hash_check.outputs.needs_deployment != 'false'
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.3.1"

      - name: Use Node.js 24
        if: steps.check_commits.outputs.skip_build != 'true' && steps.hash_check.outputs.needs_deployment != 'false'
        uses: actions/setup-node@v6
        with:
          node-version: 24

      - name: Cache dependencies
        if: steps.check_commits.outputs.skip_build != 'true' && steps.hash_check.outputs.needs_deployment != 'false'
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        if: steps.check_commits.outputs.skip_build != 'true' && steps.hash_check.outputs.needs_deployment != 'false'
        run: bun install

      - name: Install Vercel CLI
        if: steps.check_commits.outputs.skip_build != 'true' && steps.hash_check.outputs.needs_deployment != 'false'
        run: bun install --global vercel@latest

      - name: Pull Vercel Environment Information
        if: steps.check_commits.outputs.skip_build != 'true' && steps.hash_check.outputs.needs_deployment != 'false'
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build workspace dependencies
        if: steps.check_commits.outputs.skip_build != 'true' && steps.hash_check.outputs.needs_deployment != 'false'
        run: bunx turbo run build --filter=@tuturuuu/types

      - name: Build Project Artifacts
        if: steps.check_commits.outputs.skip_build != 'true' && steps.hash_check.outputs.needs_deployment != 'false'
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        if: steps.check_commits.outputs.skip_build != 'true' && steps.hash_check.outputs.needs_deployment != 'false'
        run: |
          DEPLOYMENT_URL=$(vercel deploy --archive=tgz --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=${DEPLOYMENT_URL}" >> $GITHUB_OUTPUT
          echo "${DEPLOYMENT_URL}"

      - name: Update deployment hash (success)
        if: success() && steps.hash_check.outputs.needs_deployment != 'false'
        run: |
          chmod +x .github/scripts/deployment-hash.sh
          .github/scripts/deployment-hash.sh \
            --app tudo \
            --branch "${GITHUB_REF#refs/heads/}" \
            --mode update \
            --status success \
            --url "${{ steps.deploy.outputs.url }}"

      - name: Update deployment hash (failure)
        if: failure() && steps.hash_check.outputs.needs_deployment != 'false'
        run: |
          chmod +x .github/scripts/deployment-hash.sh
          .github/scripts/deployment-hash.sh \
            --app tudo \
            --branch "${GITHUB_REF#refs/heads/}" \
            --mode update \
            --status failure

      - name: Commit hash updates
        if: always() && steps.hash_check.outputs.needs_deployment != 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Retry logic for concurrent workflow commits
          for i in {1..5}; do
            git add .deployment-hashes/

            # Check if there are changes to commit
            if git diff --quiet && git diff --staged --quiet; then
              echo "No changes to commit"
              exit 0
            fi

            git commit -m "chore: update deployment hash for tudo on ${GITHUB_REF#refs/heads/}" || true

            # Pull latest changes and rebase
            git pull --rebase origin "${GITHUB_REF#refs/heads/}" || true

            # Try to push
            if git push origin HEAD:"${GITHUB_REF#refs/heads/}"; then
              echo "Successfully pushed hash updates"
              exit 0
            fi

            echo "Push failed, retrying in $((i * 2)) seconds... (attempt $i/5)"
            sleep $((i * 2))
          done

          echo "Failed to push after 5 attempts, but continuing workflow"
          exit 0

      - name: Comment deployment status on PR
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const app = 'tudo';
            const skipBuild = '${{ steps.check_commits.outputs.skip_build }}';
            const needsDeployment = '${{ steps.hash_check.outputs.needs_deployment }}';
            const hashChanged = '${{ steps.hash_check.outputs.hash_changed }}';
            const lastFailed = '${{ steps.hash_check.outputs.last_failed }}';
            const deployUrl = '${{ steps.deploy.outputs.url }}';
            const hashLog = `${{ steps.hash_check.outputs.hash_log }}`;
            const jobStatus = '${{ job.status }}';

            let emoji = 'üîç';
            let status = 'Checking';
            let details = [];

            if (skipBuild === 'true') {
              emoji = '‚è≠Ô∏è';
              status = 'Skipped - Newer Commit';
              details.push('A newer commit exists on this branch. Deployment skipped.');
            } else if (needsDeployment === 'false') {
              emoji = '‚úÖ';
              status = 'No Deployment Needed';
              details.push('**Hash Status:** Unchanged');
              details.push('**Reason:** No code changes detected since last deployment');
            } else if (jobStatus === 'success' && deployUrl) {
              emoji = 'üöÄ';
              status = 'Deployed Successfully';
              if (hashChanged === 'true') {
                details.push('**Hash Status:** Changed');
              }
              if (lastFailed === 'true') {
                details.push('**Reason:** Retrying after previous failure');
              }
              details.push(`**Deployment URL:** ${deployUrl}`);
            } else if (jobStatus === 'failure') {
              emoji = '‚ùå';
              status = 'Deployment Failed';
              details.push('**Status:** Build or deployment encountered errors');
              details.push('Check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.');
            } else if (needsDeployment === 'true') {
              emoji = '‚öôÔ∏è';
              status = 'Deployment In Progress';
              if (hashChanged === 'true') {
                details.push('**Hash Status:** Changed');
              }
              if (lastFailed === 'true') {
                details.push('**Reason:** Retrying after previous failure');
              }
            }

            const body = `### ${emoji} Tudo Preview Deployment - ${status}

            ${details.join('\n')}

            <details>
            <summary>Hash Check Details</summary>

            \`\`\`
            ${hashLog || 'No hash check details available'}
            \`\`\`
            </details>

            ---
            *Workflow: [${context.workflow}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) ‚Ä¢ Commit: ${context.sha.substring(0, 7)}*`;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Tudo Preview Deployment')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
