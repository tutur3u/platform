name: Vercel Rewise Preview Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_REWISE_PROJECT_ID }}
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
on:
  push:
    branches-ignore:
      - production
    paths:
      - "apps/rewise/**"
      - "packages/**"
      - ".github/workflows/vercel-preview-rewise.yaml"
  workflow_dispatch:

jobs:
  Deploy-Preview:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Check for newer commits
        id: check_commits
        run: |
          CURRENT_BRANCH=${GITHUB_REF#refs/heads/}
          git fetch origin $CURRENT_BRANCH || { echo "Remote branch not found, continuing with build"; echo "skip_build=false" >> $GITHUB_OUTPUT; exit 0; }
          LATEST_COMMIT=$(git rev-parse origin/$CURRENT_BRANCH 2>/dev/null || echo "")
          CURRENT_COMMIT=${GITHUB_SHA}
          if [ -n "$LATEST_COMMIT" ] && [ "$LATEST_COMMIT" != "$CURRENT_COMMIT" ]; then
            echo "Newer commit found on $CURRENT_BRANCH branch. Skipping build."
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "This is the latest commit or new branch. Proceeding with build."
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Quick content change detection
        id: quick_check
        if: steps.check_commits.outputs.skip_build != 'true'
        run: |
          # Force build for staging branch
          CURRENT_BRANCH=${GITHUB_REF#refs/heads/}
          if [ "$CURRENT_BRANCH" = "staging" ]; then
            echo "Staging branch detected. Forcing build regardless of content changes."
            echo "skip_quick=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Compute safe base commit (handles initial commits and shallow clones)
          BASE_COMMIT=$(git rev-parse --verify HEAD~ 2>/dev/null || echo "$GITHUB_SHA")

          git diff --name-only "$BASE_COMMIT" HEAD | grep -E 'apps/rewise/|packages/' > /tmp/changed_files.txt || true
          if [ ! -s /tmp/changed_files.txt ]; then
            echo "No relevant content changes detected. Skipping build."
            echo "skip_quick=true" >> $GITHUB_OUTPUT
          else
            echo "Content changes detected in $(wc -l < /tmp/changed_files.txt) files."
            echo "skip_quick=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup bun
        if: steps.check_commits.outputs.skip_build != 'true' && steps.quick_check.outputs.skip_quick != 'true'
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.3.1"

      - name: Use Node.js 24
        if: steps.check_commits.outputs.skip_build != 'true' && steps.quick_check.outputs.skip_quick != 'true'
        uses: actions/setup-node@v6
        with:
          node-version: 24

      - name: Cache dependencies
        if: steps.check_commits.outputs.skip_build != 'true' && steps.quick_check.outputs.skip_quick != 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        if: steps.check_commits.outputs.skip_build != 'true' && steps.quick_check.outputs.skip_quick != 'true'
        run: bun install

      - name: Check Turborepo cache
        id: turbo_check
        if: steps.check_commits.outputs.skip_build != 'true' && steps.quick_check.outputs.skip_quick != 'true'
        run: |
          # Force build for staging branch
          CURRENT_BRANCH=${GITHUB_REF#refs/heads/}
          if [ "$CURRENT_BRANCH" = "staging" ]; then
            echo "Staging branch detected. Forcing build regardless of cache."
            echo "skip_turbo=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Step 1: Run Turborepo dry-run and capture exit status
          bunx turbo build --filter=@tuturuuu/rewise --dry-run=json > /tmp/turbo-plan-raw.json 2>&1
          turbo_exit=$?

          if [ $turbo_exit -ne 0 ]; then
            echo "::warning::Turborepo dry-run failed with exit code $turbo_exit. Proceeding with build."
            echo "Turborepo output:"
            cat /tmp/turbo-plan-raw.json
            echo "skip_turbo=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Step 2: Extract JSON from output and capture exit status
          sed -n '/{/,$ p' /tmp/turbo-plan-raw.json > /tmp/turbo-plan.json 2>/dev/null
          sed_exit=$?

          if [ $sed_exit -ne 0 ]; then
            echo "::warning::Failed to extract JSON from Turborepo output (sed exit $sed_exit). Proceeding with build."
            echo "Raw Turborepo output:"
            cat /tmp/turbo-plan-raw.json
            echo "skip_turbo=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Verify extracted JSON is non-empty
          if [ ! -s /tmp/turbo-plan.json ]; then
            echo "::warning::Extracted JSON is empty. Proceeding with build."
            echo "Raw Turborepo output:"
            cat /tmp/turbo-plan-raw.json
            echo "skip_turbo=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Step 3: Parse with jq and capture exit status
          uncached_tasks=$(jq -r '.tasks[] | select(.cache.status != "HIT") | .taskId' /tmp/turbo-plan.json 2>&1)
          jq_exit=$?

          if [ $jq_exit -ne 0 ]; then
            echo "::warning::jq failed to parse JSON (exit $jq_exit). Proceeding with build."
            echo "jq error output: $uncached_tasks"
            echo "Extracted JSON:"
            cat /tmp/turbo-plan.json
            echo "skip_turbo=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Count uncached tasks (only reached if all steps succeeded)
          uncached_count=$(echo "$uncached_tasks" | grep -c . || echo "0")

          if [ "$uncached_count" -eq 0 ]; then
            echo "All tasks cached in Turborepo. Skipping build."
            echo "skip_turbo=true" >> $GITHUB_OUTPUT
          else
            echo "Found $uncached_count uncached tasks. Build required."
            echo "Uncached tasks:"
            echo "$uncached_tasks"
            echo "skip_turbo=false" >> $GITHUB_OUTPUT
          fi
        env:
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

      - name: Install Vercel CLI
        if: steps.check_commits.outputs.skip_build != 'true' && steps.quick_check.outputs.skip_quick != 'true' && steps.turbo_check.outputs.skip_turbo != 'true'
        run: bun install --global vercel@latest

      - name: Pull Vercel Environment Information
        if: steps.check_commits.outputs.skip_build != 'true' && steps.quick_check.outputs.skip_quick != 'true' && steps.turbo_check.outputs.skip_turbo != 'true'
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build workspace dependencies
        if: steps.check_commits.outputs.skip_build != 'true' && steps.quick_check.outputs.skip_quick != 'true' && steps.turbo_check.outputs.skip_turbo != 'true'
        run: bunx turbo run build --filter=@tuturuuu/types

      - name: Build Project Artifacts
        if: steps.check_commits.outputs.skip_build != 'true' && steps.quick_check.outputs.skip_quick != 'true' && steps.turbo_check.outputs.skip_turbo != 'true'
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        if: steps.check_commits.outputs.skip_build != 'true' && steps.quick_check.outputs.skip_quick != 'true' && steps.turbo_check.outputs.skip_turbo != 'true'
        run: vercel deploy --archive=tgz --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
