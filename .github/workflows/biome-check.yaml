name: Biome Check

on:
  push:
    branches-ignore:
      - 'dependabot/**'
      - 'staging'
      - 'production'
  workflow_dispatch:

jobs:
  format:
    name: Biome Format Check
    timeout-minutes: 10
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      files_checked: ${{ steps.format-check.outputs.files_checked }}
      errors: ${{ steps.format-check.outputs.errors }}
      has_issues: ${{ steps.format-check.outputs.has_issues }}
      exit_code: ${{ steps.format-check.outputs.exit_code }}
    steps:
      - name: Check out code
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Setup Biome
        uses: biomejs/setup-biome@v2
        with:
          version: latest

      - name: Check Biome formatting
        id: format-check
        run: |
          # Capture biome format output and exit code
          set +e
          biome_output=$(biome format . 2>&1)
          biome_exit_code=$?
          set -e
          
          echo "exit_code=$biome_exit_code" >> $GITHUB_OUTPUT
          
          # Save output to file for debugging
          echo "$biome_output" > format_output.txt
          
          # Parse biome output for statistics
          # Strip ANSI color codes first, then parse
          clean_output=$(echo "$biome_output" | sed 's/\x1b\[[0-9;]*m//g')

          files_checked=$(echo "$clean_output" | grep "Checked [0-9]* files" | sed 's/Checked \([0-9]*\) files.*/\1/' || echo "0")
          errors=$(echo "$clean_output" | grep "Found [0-9]* errors" | sed 's/Found \([0-9]*\) errors.*/\1/' || echo "0")
          
          echo "files_checked=$files_checked" >> $GITHUB_OUTPUT
          echo "errors=$errors" >> $GITHUB_OUTPUT
          
          # Check if there are any issues
          if [ "$biome_exit_code" -ne 0 ]; then
            echo "has_issues=true" >> $GITHUB_OUTPUT
          else
            echo "has_issues=false" >> $GITHUB_OUTPUT
          fi

  lint:
    name: Biome Lint Check
    timeout-minutes: 10
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      files_checked: ${{ steps.lint-check.outputs.files_checked }}
      errors: ${{ steps.lint-check.outputs.errors }}
      warnings: ${{ steps.lint-check.outputs.warnings }}
      total_issues: ${{ steps.lint-check.outputs.total_issues }}
      has_issues: ${{ steps.lint-check.outputs.has_issues }}
      exit_code: ${{ steps.lint-check.outputs.exit_code }}
    steps:
      - name: Check out code
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Setup Biome
        uses: biomejs/setup-biome@v2
        with:
          version: latest

      - name: Check Biome linting
        id: lint-check
        run: |
          # Capture biome lint output and exit code
          set +e
          biome_output=$(biome lint . 2>&1)
          biome_exit_code=$?
          set -e
          
          echo "exit_code=$biome_exit_code" >> $GITHUB_OUTPUT
          
          # Save output to file for debugging
          echo "$biome_output" > lint_output.txt
          
          # Parse biome output for statistics
          # Strip ANSI color codes first, then parse
          clean_output=$(echo "$biome_output" | sed 's/\x1b\[[0-9;]*m//g')

          files_checked=$(echo "$clean_output" | grep "Checked [0-9]* files" | sed 's/Checked \([0-9]*\) files.*/\1/' || echo "0")
          errors=$(echo "$clean_output" | grep "Found [0-9]* errors" | sed 's/Found \([0-9]*\) errors.*/\1/' || echo "0")
          warnings=$(echo "$clean_output" | grep "Found [0-9]* warnings" | sed 's/Found \([0-9]*\) warnings.*/\1/' || echo "0")
          total_issues=$((errors + warnings))
          
          echo "files_checked=$files_checked" >> $GITHUB_OUTPUT
          echo "errors=$errors" >> $GITHUB_OUTPUT
          echo "warnings=$warnings" >> $GITHUB_OUTPUT
          echo "total_issues=$total_issues" >> $GITHUB_OUTPUT
          
          # Check if there are any issues
          if [ "$biome_exit_code" -ne 0 ]; then
            echo "has_issues=true" >> $GITHUB_OUTPUT
          else
            echo "has_issues=false" >> $GITHUB_OUTPUT
          fi
  
  apply-format:
    name: Apply Format
    runs-on: ubuntu-latest
    needs: [format]
    if: ${{ needs.format.outputs.has_issues == 'true' }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Check out code
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Setup Biome
        uses: biomejs/setup-biome@v2
        with:
          version: latest

      - name: Apply Biome format
        run: biome format --write

      - name: Check for changes
        id: git-check
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure Git
        if: steps.git-check.outputs.changes == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Create Pull Request
        if: steps.git-check.outputs.changes == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'style: apply biome formatting'
          title: 'style: apply biome formatting for ${{ github.ref_name }}'
          body: |
            This PR fixes code formatting issues using Biome.

            Auto-generated by the Biome Format Check workflow.
          branch: fix/biome-formatting-${{ github.ref_name }}
          base: ${{ github.ref_name }}
          delete-branch: true

      - name: Fail Workflow After Creating PR
        if: steps.create-pr.outputs.pull-request-url != ''
        run: |
          echo "Biome formatting issues were found and a PR has been created."
          echo "PR URL: ${{ steps.create-pr.outputs.pull-request-url }}"
          exit 1

  comment:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: [format, lint]
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Comment on PR with progress
        uses: actions/github-script@v7
        with:
          script: |
            // Get PR number from context or search for PR associated with this branch
            let prNumber = null;
            
            if (context.issue && context.issue.number) {
              prNumber = context.issue.number;
            } else {
              // For push events, find PR associated with this branch
              try {
                const { data: prs } = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`,
                  state: 'open'
                });
                
                if (prs.length > 0) {
                  prNumber = prs[0].number;
                }
              } catch (error) {
                console.log('No PR found for this branch or error occurred:', error.message);
                return; // Exit if no PR is found
              }
            }
            
            if (!prNumber) {
              console.log('No PR found to comment on');
              return;
            }
            
            // Get outputs from both jobs
            const formatFilesChecked = '${{ needs.format.outputs.files_checked }}';
            const formatErrors = '${{ needs.format.outputs.errors }}';
            const formatHasIssues = '${{ needs.format.outputs.has_issues }}';
            
            const lintFilesChecked = '${{ needs.lint.outputs.files_checked }}';
            const lintErrors = '${{ needs.lint.outputs.errors }}';
            const lintWarnings = '${{ needs.lint.outputs.warnings }}';
            const lintTotalIssues = '${{ needs.lint.outputs.total_issues }}';
            const lintHasIssues = '${{ needs.lint.outputs.has_issues }}';
            
            // Calculate overall status
            const formatErrorsCount = parseInt(formatErrors) || 0;
            const lintErrorsCount = parseInt(lintErrors) || 0;
            const lintWarningsCount = parseInt(lintWarnings) || 0;
            const lintIssueCount = parseInt(lintTotalIssues) || 0;
            const totalIssuesAcrossJobs = formatErrorsCount + lintIssueCount;
            const overallSuccess = formatHasIssues === 'false' && lintHasIssues === 'false';
            
            let body;

            const timestamp = new Date().toLocaleString();

            const issueIcon = totalIssuesAcrossJobs > 50 ? '🚨' : totalIssuesAcrossJobs > 20 ? '⚠️' : totalIssuesAcrossJobs > 10 ? '🔍' : '🔧';
            
            const formatStatus = formatErrorsCount > 0 ? '🔴 Issues found' : '✅ Passed';
            const lintErrorsStatus = lintErrorsCount > 0 ? '🔴 Needs fixing' : '✅ None';
            const lintWarningsStatus = lintWarningsCount > 0 ? '🟡 Consider fixing' : '✅ None';
            const lintStatus = lintIssueCount > 0 ? '🔴 Issues found' : '✅ Passed';
            
            const nextSteps = overallSuccess ?
              '### 🎉 All Issues Resolved!\n\nYour code is now **100% clean**! Great job! 🏆' :
              '### 📋 Next Steps\n' +
              (formatHasIssues === 'true' ?
                '\nRun the following command to fix format issues:\n```bash\nbiome format --write\n```' : '') +
              (lintHasIssues === 'true' ?
                '\nRun the following command to fix lint issues:\n```bash\nbiome lint --write\n```' : '');
            
            body = `
            ## ${issueIcon} Biome Check Report

            <div align="center">

            ### Total Issues Found: **${totalIssuesAcrossJobs}**

            </div>

            ### 🔧 Format Check Results

            | Metric | Value | Status |
            |--------|-------|--------|
            | 📁 **Files Checked** | ${formatFilesChecked} | ✅ Complete |
            | 🔧 **Format Errors** | ${formatErrorsCount} | ${formatStatus} |

            ### 🔍 Lint Check Results

            | Metric | Value | Status |
            |--------|-------|--------|
            | 📁 **Files Checked** | ${lintFilesChecked} | ✅ Complete |
            | ❌ **Errors** | ${lintErrorsCount} | ${lintErrorsStatus} |
            | ⚠️ **Warnings** | ${lintWarningsCount} | ${lintWarningsStatus} |
            | 📝 **Total Issues** | ${lintIssueCount} | ${lintStatus} |

            ${nextSteps}

            <div align="center">
            <sub>🤖 Auto-generated by <strong>Biome Check</strong> workflow • Last updated: ${timestamp}</sub>
            </div>
            `;

            // Find existing Biome Check comment and update it, or create new one
            try {
              const { data: comments } = await github.rest.issues.listComments({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
              });

              // Look for existing Biome Check comment with more specific markers
              const existingComment = comments.find(comment => 
                comment.user.login === 'github-actions[bot]' && 
                comment.body.includes('<!-- biome-check-comment -->')
              );

              // Add a unique marker to identify our comments
              const bodyWithMarker = '<!-- biome-check-comment -->\n' + body;

              if (existingComment) {
                console.log(`Updating existing comment ${existingComment.id} on PR ${prNumber}`);
                await github.rest.issues.updateComment({
                  comment_id: existingComment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: bodyWithMarker
                });
              } else {
                console.log(`Creating new comment on PR ${prNumber}`);
                await github.rest.issues.createComment({
                  issue_number: prNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: bodyWithMarker
                });
              }
            } catch (error) {
              console.log('Error managing PR comment:', error.message);
            }